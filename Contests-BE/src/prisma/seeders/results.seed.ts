import { SeedParams } from "@/types/seed";

export default async function seedResults({ prisma, logger }: SeedParams) {
  try {
    // X√≥a d·ªØ li·ªáu c≈©
    await prisma.result.deleteMany();
    logger.info("üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu results c≈©");

    // L·∫•y danh s√°ch contestants v√† matches
    const contestants = await prisma.contestant.findMany({
      select: { id: true },
    });

    const matches = await prisma.match.findMany({
      select: { id: true, name: true },
    });

    if (contestants.length === 0) {
      logger.warn("‚ö†Ô∏è Kh√¥ng c√≥ contestants ƒë·ªÉ t·∫°o results");
      return [];
    }

    if (matches.length === 0) {
      logger.warn("‚ö†Ô∏è Kh√¥ng c√≥ matches ƒë·ªÉ t·∫°o results");
      return [];
    }

    logger.info(
      `üìä T√¨m th·∫•y ${contestants.length} contestants v√† ${matches.length} matches`
    );

    const results = [];

    // T·∫°o sample results cho m·ªói contestant trong m·ªói match
    for (const contestant of contestants) {
      for (const match of matches) {
        const numberOfQuestions = Math.floor(Math.random() * 6) + 5; // 5-10 c√¢u

        for (
          let questionOrder = 1;
          questionOrder <= numberOfQuestions;
          questionOrder++
        ) {
          const isCorrect = Math.random() > 0.3;

          const questionTypes = [
            "To√°n h·ªçc",
            "L√Ω thuy·∫øt",
            "Th·ª±c h√†nh",
            "Ph√¢n t√≠ch",
            "T·ªïng h·ª£p",
          ];
          const randomType =
            questionTypes[Math.floor(Math.random() * questionTypes.length)];

          results.push({
            name: `${randomType} - C√¢u ${questionOrder}`,
            contestantId: contestant.id,
            matchId: match.id,
            isCorrect,
            questionOrder,
          });
        }
      }
    }

    logger.info(`üìù Chu·∫©n b·ªã t·∫°o ${results.length} results...`);

    const createdResults = [];
    const batchSize = 50;

    for (let i = 0; i < results.length; i += batchSize) {
      const batch = results.slice(i, i + batchSize);

      for (const result of batch) {
        try {
          const existing = await prisma.result.findFirst({
            where: {
              contestantId: result.contestantId,
              matchId: result.matchId,
              questionOrder: result.questionOrder,
            },
          });

          if (!existing) {
            const created = await prisma.result.create({
              data: result,
              include: {
                contestant: {
                  include: {
                    student: {
                      select: { fullName: true }, // L·∫•y t√™n t·ª´ student
                    },
                  },
                },
                match: {
                  select: { name: true },
                },
              },
            });
            createdResults.push(created);
          }
        } catch (error) {
          const errorMessage =
            error instanceof Error ? error.message : "Unknown error";
          logger.warn(
            `‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o result cho contestant ${result.contestantId}, match ${result.matchId}, question ${result.questionOrder}: ${errorMessage}`
          );
        }
      }

      logger.info(
        `‚úÖ ƒê√£ t·∫°o batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(
          results.length / batchSize
        )}`
      );
    }

    const totalResults = createdResults.length;
    const correctResults = createdResults.filter(r => r.isCorrect).length;
    const incorrectResults = totalResults - correctResults;
    const accuracy =
      totalResults > 0
        ? ((correctResults / totalResults) * 100).toFixed(2)
        : "0.00";

    logger.info(`üéâ T·∫°o th√†nh c√¥ng ${totalResults} results:`);
    logger.info(`   ‚úÖ ƒê√∫ng: ${correctResults} (${accuracy}%)`);
    logger.info(
      `   ‚ùå Sai: ${incorrectResults} (${(100 - parseFloat(accuracy)).toFixed(
        2
      )}%)`
    );

    if (createdResults.length > 0) {
      const sample = createdResults[0];
      logger.info(
        `üìã Sample result:   Contestant: ${sample.contestant.student.fullName}, Match: ${sample.match.name}, Correct: ${sample.isCorrect}`
      );
    }

    return createdResults;
  } catch (error) {
    logger.error("‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu results:", error);
    throw error;
  }
}
